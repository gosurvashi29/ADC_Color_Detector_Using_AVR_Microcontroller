
ADCtemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000280  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ef  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001be  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000296  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000175  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000244  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  7a:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8adc_readi>:
		}
		if (k>700 && k<750)
		{
			disp_string("WHITE");
		}
		if (k>750 && k<800)
  82:	80 5c       	subi	r24, 0xC0	; 192
		{
			disp_string("YELLOW");
  84:	87 b9       	out	0x07, r24	; 7
  86:	87 ed       	ldi	r24, 0xD7	; 215
  88:	86 b9       	out	0x06, r24	; 6
  8a:	34 9b       	sbis	0x06, 4	; 6
		}
		
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z8adc_readi+0x8>
  8e:	24 b1       	in	r18, 0x04	; 4
  90:	35 b1       	in	r19, 0x05	; 5
	{
		ADMUX=0X40 + channel;
		ADCSRA=0XD7;
		while((ADCSRA & 0X10) ==0);
		return ADC;
	}
  92:	82 2f       	mov	r24, r18
  94:	93 2f       	mov	r25, r19
  96:	08 95       	ret

00000098 <_Z8disp_cmdj>:
	void disp_cmd(unsigned int cmd)
	{
		PORTB=((cmd & 0XF0)+0X04);
  98:	9c 01       	movw	r18, r24
  9a:	20 7f       	andi	r18, 0xF0	; 240
  9c:	33 27       	eor	r19, r19
  9e:	2c 5f       	subi	r18, 0xFC	; 252
  a0:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	ef ec       	ldi	r30, 0xCF	; 207
  a4:	f7 e0       	ldi	r31, 0x07	; 7
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z8disp_cmdj+0xe>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z8disp_cmdj+0x14>
  ac:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	94 50       	subi	r25, 0x04	; 4
  b2:	98 bb       	out	0x18, r25	; 24
		PORTB=(((cmd<<4)& 0XF0)+0X04);
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8c 5f       	subi	r24, 0xFC	; 252
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z8disp_cmdj+0x28>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8disp_cmdj+0x2e>
  c6:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 50       	subi	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <_Z9disp_datai>:
		
	}
	void disp_data( int cmd)
	{
		PORTB=((cmd  & 0XF0)+0X05);
  d0:	9c 01       	movw	r18, r24
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	33 27       	eor	r19, r19
  d6:	2b 5f       	subi	r18, 0xFB	; 251
  d8:	28 bb       	out	0x18, r18	; 24
  da:	ef ec       	ldi	r30, 0xCF	; 207
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z9disp_datai+0xe>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z9disp_datai+0x14>
  e4:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  e6:	28 b3       	in	r18, 0x18	; 24
  e8:	24 50       	subi	r18, 0x04	; 4
  ea:	28 bb       	out	0x18, r18	; 24
		PORTB=(((cmd <<4)& 0XF0)+0X05);
  ec:	82 95       	swap	r24
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	98 27       	eor	r25, r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	98 27       	eor	r25, r24
  f8:	8b 5f       	subi	r24, 0xFB	; 251
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z9disp_datai+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z9disp_datai+0x36>
 106:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	84 50       	subi	r24, 0x04	; 4
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret

00000110 <_Z11disp_stringPc>:
		
	}

	void disp_string( char *str)
	{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
		int i=0;
		while (str[i]!='\0')
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <_Z11disp_stringPc+0x1a>
		_delay_ms(1);
		PORTB=PORTB-0X04;
		
	}

	void disp_string( char *str)
 11c:	21 96       	adiw	r28, 0x01	; 1
	{
		int i=0;
		while (str[i]!='\0')
		{
			disp_data (str[i]);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z9disp_datai>
	}

	void disp_string( char *str)
	{
		int i=0;
		while (str[i]!='\0')
 124:	89 91       	ld	r24, Y+
 126:	81 11       	cpse	r24, r1
 128:	fa cf       	rjmp	.-12     	; 0x11e <_Z11disp_stringPc+0xe>
		{
			disp_data (str[i]);
			i++;
			
		}
	}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <_Z8disp_numj>:

	void disp_num(unsigned int num)
	{
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
		int a=0;
		if (num==0)
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	81 f5       	brne	.+96     	; 0x19e <_Z8disp_numj+0x6e>
		{
			disp_data(48);
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z9disp_datai>
		}
		disp_cmd (0X04);
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 14e:	22 c0       	rjmp	.+68     	; 0x194 <_Z8disp_numj+0x64>
		while (num!=0)
		{
			a=num % 10;
 150:	9e 01       	movw	r18, r28
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	0e 94 32 01 	call	0x264	; 0x264 <__umulhisi3>
 15a:	8c 01       	movw	r16, r24
 15c:	16 95       	lsr	r17
 15e:	07 95       	ror	r16
 160:	16 95       	lsr	r17
 162:	07 95       	ror	r16
 164:	16 95       	lsr	r17
 166:	07 95       	ror	r16
 168:	98 01       	movw	r18, r16
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	c8 01       	movw	r24, r16
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	9e 01       	movw	r18, r28
 182:	28 1b       	sub	r18, r24
 184:	39 0b       	sbc	r19, r25
 186:	c9 01       	movw	r24, r18
			disp_data(a+48);
 188:	c0 96       	adiw	r24, 0x30	; 48
 18a:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z9disp_datai>
			num=num/10;
 18e:	e8 01       	movw	r28, r16
		if (num==0)
		{
			disp_data(48);
		}
		disp_cmd (0X04);
		while (num!=0)
 190:	20 97       	sbiw	r28, 0x00	; 0
 192:	f1 f6       	brne	.-68     	; 0x150 <_Z8disp_numj+0x20>
		{
			a=num % 10;
			disp_data(a+48);
			num=num/10;
		}
		disp_cmd (0X06);
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <_Z8disp_numj+0x78>
		int a=0;
		if (num==0)
		{
			disp_data(48);
		}
		disp_cmd (0X04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 1a6:	d4 cf       	rjmp	.-88     	; 0x150 <_Z8disp_numj+0x20>
			a=num % 10;
			disp_data(a+48);
			num=num/10;
		}
		disp_cmd (0X06);
	}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <_Z8lcd_initv>:
	void lcd_init()
	{
		disp_cmd(0X02);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X28);
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X0C);
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X06);
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 1d2:	08 95       	ret

000001d4 <main>:
int adc_read(int channel);
int temp(int k);
int main(void)
{
	
	DDRB = 0XFF;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 1d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z8lcd_initv>
	disp_cmd(0X80);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
	disp_string("WELCOME");
 1e4:	80 e6       	ldi	r24, 0x60	; 96
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	89 e6       	ldi	r24, 0x69	; 105
 1f0:	98 e1       	ldi	r25, 0x18	; 24
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x1e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x28>
 1fc:	00 00       	nop
	_delay_ms(1000);
	disp_cmd(0X01);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x36>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x3c>
 210:	00 00       	nop

	
	int X;
	while (1)
	{
		X=adc_read(0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 41 00 	call	0x82	; 0x82 <_Z8adc_readi>
 21a:	ec 01       	movw	r28, r24
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	29 e6       	ldi	r18, 0x69	; 105
 220:	88 e1       	ldi	r24, 0x18	; 24
 222:	91 50       	subi	r25, 0x01	; 1
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x4e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x58>
 22c:	00 00       	nop
		
		_delay_ms(1000);
		disp_cmd(0X01);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x66>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x6c>
 240:	00 00       	nop
		_delay_ms(2);
		disp_cmd(0XC5);
 242:	85 ec       	ldi	r24, 0xC5	; 197
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_num(X);
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 98 00 	call	0x130	; 0x130 <_Z8disp_numj>
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	29 e6       	ldi	r18, 0x69	; 105
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x82>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x8c>
 260:	00 00       	nop
 262:	d7 cf       	rjmp	.-82     	; 0x212 <main+0x3e>

00000264 <__umulhisi3>:
 264:	a2 9f       	mul	r26, r18
 266:	b0 01       	movw	r22, r0
 268:	b3 9f       	mul	r27, r19
 26a:	c0 01       	movw	r24, r0
 26c:	a3 9f       	mul	r26, r19
 26e:	01 d0       	rcall	.+2      	; 0x272 <__umulhisi3+0xe>
 270:	b2 9f       	mul	r27, r18
 272:	70 0d       	add	r23, r0
 274:	81 1d       	adc	r24, r1
 276:	11 24       	eor	r1, r1
 278:	91 1d       	adc	r25, r1
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
